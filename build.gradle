import edu.wpi.first.toolchain.*

plugins {
  id 'cpp'
  id 'java'
  id 'google-test'
  id 'edu.wpi.first.wpilib.repositories.WPILibRepositoriesPlugin' version '2025.0'
  id 'edu.wpi.first.NativeUtils' version '2025.9.0'
  id 'edu.wpi.first.GradleVsCode' version '2.1.0'
}

// WPILib Version
ext.wpilibVersion = "2025.+"

repositories {
  mavenCentral()
}
if (project.hasProperty('releaseMode')) {
  wpilibRepositories.addAllReleaseRepositories(project)
} else {
  wpilibRepositories.addAllDevelopmentRepositories(project)
}

java {
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17
}

// Apply C++ configuration
apply from: 'config.gradle'

if (project.hasProperty('noTests')) {
    test.enabled = false
}

// Set up exports properly
nativeUtils {
  exportsConfigs {
    // Main library is just default empty. This will export everything
    Vendor {
    }
  }
}

ext.getCurrentArch = {
    return NativePlatforms.desktop
}

def systemArch = getCurrentArch()

model {
  components {
    Vendor(NativeLibrarySpec) {
      sources {
        cpp {
          source {
            srcDirs 'src/main/native/cpp'
            include '**/*.cpp'
          }
          exportedHeaders {
            srcDirs 'src/main/native/include'
          }
        }
      }
      nativeUtils.useRequiredLibrary(it, 'wpilib_shared')
    }
  }
  testSuites {
    VendorTest {
        sources.cpp {
            source {
                srcDir 'src/test/native/cpp'
                include '**/*.cpp'
            }
        }

        binaries.all {
          def arch = it.targetPlatform.name
          if (systemArch == arch && it.buildType.name == 'debug') {
            def filePath = it.tasks.install.installDirectory.get().toString() + File.separatorChar + 'lib'
            test.dependsOn it.tasks.install
            test.systemProperty 'java.library.path', filePath
            test.environment 'LD_LIBRARY_PATH', filePath
            test.workingDir filePath
          }
        }

        nativeUtils.useRequiredLibrary(it, "wpilib_executable_shared", "googletest_static")
    }
  }
}

apply from: 'publish.gradle'

wrapper {
  gradleVersion '8.11'
}
